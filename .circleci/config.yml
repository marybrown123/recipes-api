version: 2.1
commands:
  restore-cache:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
  install-dependencies:
    steps: 
      - run: npm install
  save-cache:
    steps:
      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
  generate-prisma-client:
    steps:
      - run: npx prisma generate
  generate-prisma-migrations:
    steps:
      - run: npx prisma migrate dev
  deploy-prisma-migrations:
    steps:
      - run: npx prisma migrate deploy --preview-feature
  run-tests-unit:
    steps:
      - run: |
          UNIT_TESTS=$(circleci tests glob "./src/**/*.spec.ts" | circleci tests split --split-by=timings)
          npm run test:ci -- $UNIT_TEST 
      - store_test_results:
          path: ./test_results
  run-tests-e2e:
    steps:
      - run: |
          E2E_TEST=$(circleci tests glob "./src/**/*{e2e-spec}.ts" | circleci tests split --split-by=timings)
          npm run test:e2e -- $E2E_TEST
      - store_test_results:
          path: ./test_results

  create-env-files:
    steps:
      - run: 
          command: |
            cat > .env \<< EOF
            DATABASE_URL=$DATABASE_URL_DEPLOY
            DATABASE_HOST=$DATABASE_HOST_DEPLOY
            DATABASE_PORT=$DATABASE_PORT
            DATABASE_USER=$DATABASE_USER
            DATABASE_PASSWORD=$DATABASE_PASSWORD
            DATABASE_NAME=$DATABASE_NAME
            PORT=$PORT
            JWT_SECRET=$JWT_SECRET
            ADMIN_EMAIL=$ADMIN_EMAIL
            ADMIN_NAME=$ADMIN_NAME
            ADMIN_PASSWORD=$ADMIN_PASSWORD
            TEST_EMAIL=$TEST_EMAIL
            TEST_NAME=$TEST_NAME
            TEST_PASSWORD=$TEST_PASSWORD
            REDIS_HOST=$REDIS_HOST_DEPLOY
            REDIS_PORT=$REDIS_PORT
            REDIS_USERNAME=$REDIS_USERNAME
            REDIS_PASSWORD=$REDIS_PASSWORD
            TTL_IN_SECONDS=$TTL_IN_SECONDS
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KET_ID
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            AWS_S3_REGION=$AWS_S3_REGION
            S3_BUCKET_NAME=$S3_BUCKET_NAME
            MAIL_USER=$MAIL_USER
            MAIL_PASS=$MAIL_PASS
            MAIL_HOST=$MAIL_HOST
            MAIL_PORT=$MAIL_PORT
            EOF
            cat .env > test.env
executors:
  executor:
    resource_class: small
    docker: 
      - image: cimg/node:18.16.0
        environment:
          NODE_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: cimg/postgres:14.1
        environment:
          POSTGRES_USER: testUser
          POSTGRES_DB: test
          POSTGRES_PASSWORD: testPassword
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
      - image: cimg/redis:6.2.6
jobs:
  install-dependencies:
    executor: executor
    steps:
      - checkout
      - restore-cache
      - install-dependencies
      - save-cache
  prisma:
    executor: executor
    steps:
      - checkout
      - restore-cache
      - generate-prisma-client
      - generate-prisma-migrations
      - persist_to_workspace:
          root: .
          paths:
            - prisma
  run-tests-unit:
    executor: executor
    parallelism: 3
    steps:
      - checkout
      - restore-cache
      - attach_workspace:
          at: .
      - deploy-prisma-migrations
      - generate-prisma-client
      - run-tests-unit
  run-tests-e2e:
    executor: executor
    parallelism: 2
    steps:
      - checkout
      - restore-cache
      - attach_workspace:
          at: .
      - deploy-prisma-migrations
      - generate-prisma-client
      - run-tests-e2e
  deploy:
    docker: 
      - image: cimg/node:18.16.0
    steps:
      - add_ssh_keys:
          fingerprints:
            - 50:44:92:48:b3:4f:f8:b6:d9:dd:b8:b9:5f:8e:6a:06
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run: docker build -t $APP_IMAGE_NAME .
      - run: docker save $APP_IMAGE_NAME | gzip > appimage.tar.gz
      - create-env-files
      - run: scp -o StrictHostKeyChecking=accept-new ./.env $SSH_USER@$SSH_HOST:.env
      - run: scp -o StrictHostKeyChecking=accept-new ./appimage.tar.gz $SSH_USER@$SSH_HOST:appimage.tar.gz
      - run: scp -o StrictHostKeyChecking=accept-new ./docker-compose.yml $SSH_USER@$SSH_HOST:docker-compose.yml
      - run: ssh -o StrictHostKeyChecking=accept-new $SSH_USER@$SSH_HOST "sudo docker system prune && docker load < appimage.tar.gz && docker-compose up"
workflows:
  version: 2.1
  build-and-test:
    jobs:
      - install-dependencies
      - prisma:
          requires: 
            - install-dependencies
      - run-tests-unit:
          requires: 
            - prisma
      - run-tests-e2e:
          requires:
            - prisma
  deploy:
    jobs:
      - deploy