version: 2.1
commands:
  restore-cache:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
  install-dependencies:
    steps: 
      - run: npm install
  save-cache:
    steps:
      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
  generate-prisma-client:
    steps:
      - run: npx prisma generate
  generate-prisma-migrations:
    steps:
      - run: npx prisma migrate dev
  deploy-prisma-migrations:
    steps:
      - run: npx prisma migrate deploy --preview-feature
  run-tests:
    steps:
      - run: npm run test:ci 
      - run: npm run test:e2e 
  greetings-from-branch:
    steps:
      - run: echo "No siema z brancha <<pipeline.git.branch>>"
  create-env-files:
    steps:
      - run: 
          command: |
            cat > .env \<< EOF
            DATABASE_URL="$DATABASE_URL"
            DATABASE_HOST="$DATABASE_HOST"
            DATABASE_PORT="$DATABASE_PORT"
            DATABASE_USER="$DATABASE_USER"
            DATABASE_PASSWORD="$DATABASE_PASSWORD"
            DATABASE_NAME="$DATABASE_NAME"
            PORT="$PORT"
            JWT_SECRET="$JWT_SECRET"
            ADMIN_NAME="$ADMIN_NAME"
            ADMIN_PASSWORD="$ADMIN_PASSWORD"
            TEST_NAME="$TEST_NAME"
            TEST_PASSWORD="$TEST_PASSWORD"
            REDIS_HOST="$REDIS_HOST"
            REDIS_PORT="$RESIS_PORT"
            REDIS_USERNAME="$REDIS_USERNAME"
            REDIS_PASSWORD="$REDIS_PASSWORD"
            TTL_IN_SECONDS="$TTL_IN_SECONDS"
            AWS_ACCESS_KEY_ID="$AWS_ACCES_KET_ID"
            AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCES_KEY"
            AWS_S3_REGION="$AWS_S3_REGION"
            S3_BUCKET_NAME="$S3_BUCKET_NAME"
            EOF
            cat .env > test.env
executors:
  executor:
    resource_class: medium
    docker: 
      - image: cimg/node:18.16.0
        environment:
          NODE_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: cimg/postgres:14.1
        environment:
          POSTGRES_USER: testUser
          POSTGRES_DB: test
          POSTGRES_PASSWORD: testPassword
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
      - image: cimg/redis:6.2.6
jobs:
  install-dependencies:
    executor: executor
    steps:
      - checkout
      - restore-cache
      - install-dependencies
      - save-cache
  prisma:
    executor: executor
    steps:
      - checkout
      - restore-cache
      - generate-prisma-client
      - generate-prisma-migrations
      - persist_to_workspace:
          root: .
          paths:
            - prisma
  run-tests:
    executor: executor
    steps:
      - checkout
      - restore-cache
      - attach_workspace:
          at: .
      - deploy-prisma-migrations
      - generate-prisma-client
      - run-tests
  greetings-from-branch:
    executor: executor
    steps:
      - checkout
      - greetings-from-branch
  deploy:
    docker: 
      - image: cimg/node:18.16.0
    steps:
      - add_ssh_keys:
          fingerprints:
            - 50:44:92:48:b3:4f:f8:b6:d9:dd:b8:b9:5f:8e:6a:06
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run: docker build -t $APP_IMAGE_NAME .
      - run: docker save $APP_IMAGE_NAME | gzip > appimage.tar.gz
      - create-env-files
      - run: scp -o StrictHostKeyChecking=accept-new ./.env $SSH_USER@$SSH_HOST:.env
      - run: scp -o StrictHostKeyChecking=accept-new ./appimage.tar.gz $SSH_USER@$SSH_HOST:appimage.tar.gz
      - run: scp -o StrictHostKeyChecking=accept-new ./docker-compose.yml $SSH_USER@$SSH_HOST:docker-compose.yml
      - run: ssh -o StrictHostKeyChecking=accept-new $SSH_USER@$SSH_HOST "source .env && docker-compose up"
workflows:
  version: 2.1
  build-and-test:
    jobs:
      - install-dependencies
      - prisma:
          requires: 
            - install-dependencies
      - run-tests:
          requires: 
            - prisma
      - greetings-from-branch:
          requires: 
            - run-tests
  deploy:
    jobs:
      - deploy


